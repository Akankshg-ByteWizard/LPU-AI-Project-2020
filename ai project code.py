{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import datetime\n",
    "import calendar\n",
    "import pandas as pd \n",
    "\n",
    "def login_screen(teacherDB):\n",
    "    print(\"Auto Adjustment For Faculty\")\n",
    "    print(\"Teacher 1: 1021 \\n Teacher 2: 1022 \\n Teacher 3: 1023 \\n Teacher 4: 1024 \\n\")\n",
    "    teacherID = int(input(\"please enter your Teacher ID >> \"))\n",
    "    if(teacherID in teacherDB.keys()):\n",
    "        teacherID = teacherDB[teacherID]\n",
    "        welcome_screen(teacherID)\n",
    "    else:\n",
    "        print(\"your record doesnot exist\")\n",
    "        \n",
    "def show_free_slots(teacherID, day):\n",
    "    for time_Slot in range(5):\n",
    "        if (profTT[teacherID][day][time_Slot] == 0):\n",
    "            print(trans_dict_time[time_Slot] , \" is free\")\n",
    "\n",
    "def show_taken_slots(teacherID, day):\n",
    "    for time_Slot in range(5):\n",
    "        if (profTT[teacherID][day][time_Slot] == 1):\n",
    "            print(trans_dict_time[time_Slot] , \" is occupied\")\n",
    "\n",
    "def show_makeup_slots(teacherID, day):\n",
    "    for time_Slot in range(5):\n",
    "        if (profTT[teacherID][day][time_Slot] == 2):\n",
    "            print(trans_dict_time[time_Slot] , \" is make up adjustment\")\n",
    "            \n",
    "\n",
    "def welcome_screen(teacherID):\n",
    "    print(\"\\n\\nFaculty Requirment Portal! \\n\")\n",
    "    print(\"please select one option from the list.\")\n",
    "    print(\"Select 1>    to veiw schedule \")\n",
    "    print(\"Select 2>    to appoint a make-up class \")\n",
    "    print(\"Select 3>    to apply emergency leave \")\n",
    "    print(\"Select 4>    to exit this portal \")\n",
    "    \n",
    "    choice = int(input(\"option > \"))\n",
    "    if(choice == 1):\n",
    "        day = input(\"enter the day >> \")\n",
    "        print(\"\\nYOUR SCHEDULE \\n\")\n",
    "        day = trans_dict_day[day]\n",
    "        show_taken_slots(teacherID, day)\n",
    "        show_free_slots(teacherID, day)\n",
    "        show_makeup_slots(teacherID, day)   \n",
    "        choice = input(\"would you like to return to home page? >> \").lower()\n",
    "        if(choice == \"yes\"):\n",
    "            print(\"redirecting you to home page \\n\\n\")\n",
    "            welcome_screen(teacherID)\n",
    "        \n",
    "    elif(choice == 2):\n",
    "        day = input(\"please enter the day you wish to apply for a make up >> \")\n",
    "        day = trans_dict_day[day]\n",
    "        print(\"please choose time slot for the leave\")\n",
    "        print(\"10:00AM - 11:00AM >> 0\")\n",
    "        print(\"11:00AM - 12:0PAM >> 1\")\n",
    "        print(\"1:00PM - 2:00PM >> 2\")\n",
    "        print(\"2:00PM - 3:00PM >> 3\")\n",
    "        print(\"3:00PM - 4:00PM >> 4\")\n",
    "        time_slot = int(input(\"option >> \"))  \n",
    "        MakeUpApp(0,teacherID,day,time_slot)\n",
    "        \n",
    "    elif(choice == 3):\n",
    "        day = input(\"please enter the day you wish to apply for a leave >> \")\n",
    "        day = trans_dict_day[day]\n",
    "        print(\"please choose time slot for the leave\")\n",
    "        print(\"10:00AM - 11:00AM >> 0\")\n",
    "        print(\"11:00AM - 12:0PAM >> 1\")\n",
    "        print(\"1:00PM - 2:00PM >> 2\")\n",
    "        print(\"2:00PM - 3:00PM >> 3\")\n",
    "        print(\"3:00PM - 4:00PM >> 4\")\n",
    "        time_slot = int(input(\"option >> \"))\n",
    "        leaveApp(teacherID,day,time_slot)\n",
    "        \n",
    "        \n",
    "    elif(choice == 4):\n",
    "        print(\"\\nexiting!\")\n",
    "            \n",
    "            \n",
    "def leaveApp(teacherID, day, time_slot):\n",
    "     print(\"\\nupdating time schedule\")\n",
    "     \n",
    "     profTT[teacherID][day][time_slot] = 0\n",
    "     MakeUpApp(1,teacherID,day,time_slot)\n",
    "     choice = input(\"would you like to return to home page? >> \").lower()\n",
    "     if(choice == \"yes\"):\n",
    "         print(\"redirecting you to home page \\n\\n\")\n",
    "         welcome_screen(teacherID)\n",
    "         \n",
    "\n",
    "def MakeUpApp(flag,teacherID,day,time_slot): \n",
    "    if(flag == 0):\n",
    "        profTT[teacherID][day][time_slot] = 2\n",
    "        print(\"\\nsucessfully updated\\n\")\n",
    "        choice = input(\"would you like to return to home page? >> \").lower()\n",
    "        if(choice == \"yes\"):\n",
    "            print(\"redirecting you to home page \\n\\n\")\n",
    "            welcome_screen(teacherID)\n",
    "    else:\n",
    "        ResProfChoices = []\n",
    "        for ResProf in range(len(resprofTT)):\n",
    "            if(resprofTT[ResProf][day][time_slot] == 0):\n",
    "                ResProfChoices.append(ResProf)\n",
    "        if(ResProfChoices.count == 1):\n",
    "            resprofTT[ResProfChoices[0]][day][time_slot] = 2\n",
    "            print(\"\\n\\nassigning reserve professor\",ResProfChoices[0]+1,\"for the time slot\\n\\n\")\n",
    "        else:\n",
    "            #print(ResProfChoices)\n",
    "            bestChoice = GetBestChoice(ResProfChoices,day,time_slot)\n",
    "            print(\"\\n\\nassigning reserve professor\",bestChoice+1,\"for the time slot\\n\\n\")\n",
    "\n",
    "def GetBestChoice(choices,day,time_slot):\n",
    "    priorityTable = {}\n",
    "    for i in choices:\n",
    "        priorityTable[i] = 0    \n",
    "        if(time_slot > 4 and time_slot < 0):\n",
    "            if (resprofTT[i][day][time_slot-1] == 1 or resprofTT[i][day][time_slot+1] == 1): \n",
    "                priorityTable[i] += 1\n",
    "            elif (resprofTT[i][day][time_slot-1] == 1 and resprofTT[i][day][time_slot+1] == 1):\n",
    "                priorityTable[i] += 2\n",
    "    #print(priorityTable)         \n",
    "    for key,value in priorityTable.items():\n",
    "            if(value == max(priorityTable.values())):\n",
    "                #print(key)\n",
    "                return key\n",
    "defTT =  [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n",
    "\n",
    "profTT = [[[0,1,0,1,0],[1,1,0,0,1],[1,1,0,1,1],[0,1,1,1,0],[1,1,0,1,1]],\n",
    "            [[1,0,0,1,1],[0,1,0,1,0],[0,1,1,0,0],[1,0,1,0,0],[1,0,1,0,1]],\n",
    "            [[0,1,1,0,1],[1,0,1,0,0],[1,0,0,1,0],[1,0,1,0,1],[1,1,1,0,0]],\n",
    "            [[1,1,1,0,0],[0,0,1,1,1],[0,0,1,0,1],[0,1,0,1,1],[0,0,1,1,1]]]\n",
    "\n",
    "resprofTT = [[[1,0,0,1,1],[0,1,0,1,1],[1,1,0,0,1],[1,0,0,1,1],[0,1,0,1,1]],\n",
    "              [[0,1,1,1,0],[1,1,0,0,0],[0,1,0,1,0],[0,1,1,0,0],[1,1,0,0,0]],\n",
    "              [[1,1,0,0,0],[1,0,1,0,0],[1,0,0,1,1],[1,1,0,1,1],[1,0,1,0,0]],\n",
    "              [[0,0,1,1,1],[0,0,1,1,1],[1,0,1,0,0],[0,0,1,0,1],[0,0,1,1,1]]]\n",
    "\n",
    "trans_dict_day = {\"monday\" :0, \"tuesday\":1, \"wednesday\":2, \"thursday\":3, \"friday\":4}\n",
    "trans_dict_day_opp = {0:\"monday\" ,1:\"tuesday\", 2:\"wednesday\", 3:\"thursday\",4: \"friday\"}\n",
    "trans_dict_time= {0:\"10:00AM - 11:00AM\", 1:\"11:00AM - 12:00PM \", 2:\"1:00PM - 2:00PM\", 3:\"2:00PM - 3:00 PM \", 4:\"3:00PM - 4:00PM\"}\n",
    "teacherDB = {1:0, 1021 :0, 1022 :1, 1023:2, 1024:3}\n",
    "\n",
    "login_screen(teacherDB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
